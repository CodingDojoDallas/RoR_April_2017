RUBY

@ sign is for instance variables

use @ instead of self. (usually)

classes are UpperCamelCase. most everything else in Ruby is snake_case.

pay attention to where/how self is used (method vs. class)

capitals to create a constant; be sure to freeze
  e.g. TAGLINE = "never changing".freeze

MODULE is a collection of variables and methods (very similar to a class)
  Use a MODULE if it is meant to be included within a class
  Use a CLASS if you are going to instantiate something

class ClassName

  def method_name=(val)         # setter method (instance method)
    @instance_variable = val
  end

  def method_name               # setter and getter method (instance method)
    @instance_variable
  end

  attr_reader :attribute_name   # attr_reader creates a getter method called 'attribute_name'
  attr_writer :attribute_name   # attr_writer creates a setter method called 'attribute_name=(val)'

  attr_accessor :attribute_name # attr_accessor creates a getter and setter method for 'attribute_name'

  def self.foo                  # class method
    # code
  end

end

instance methods (`def foo ...`) vs class methods (`def self.foo ...`)

VARIABLES
  Local Variable: A regular variable in Ruby.
  Instance Variable: Begins with @ and are available to instances of the class.
  Class Variable: Begins with @@ and are available to the class itself
  Global Variable: Begins with $. Avoid using this, if possible, since it is available everywhere.

rspec . -fp -fd -c  # -c colors the output

within RSpec.describe method, describe and context are interchangeable (but RSpec.describe cannot be RSpec.context)

when would you use just a setter (e.g. attr_writer)?

what is the difference, in a class, between self and private?



RAILS

Try to run all commands in vagrant at the root; anywhere else it might get errors (I've been running inside a folder in vagrant and it's been working fine...)

`rails new project_name`
`cd project_name`

`rails server -b 0.0.0.0` to start web server

gem 'hirb', '~> 0.7.3'
  put hirb gem within the development group in the Gemfile
  `Hirb.enable` (later, in rails console)

gem 'rails-footnotes', '~> 4.1', '>= 4.1.8'
  `bundle install` then `rails generate rails_footnotes:install` in terminal
  (from the platform: gem 'rails-footnotes', '>= 4.0.0', '<5')

`bundle install` (in terminal, not rails console)

`rails generate` can be abbreviated `rails g`
`rails console` can be abbreviated `rails c`

when deleting a model, delete all files that rails created including the migration file(s)

`rake db:migrate`

`reload!` to reload console after model changes

relationships
  :references is a datatype used when making a new model to establish a relationship between the model we are creating and the model that we are referencing by adding a foreign key in the new model
    model:references adds a model_id column to the new model; e.g. user.references adds a user_id column to whatever the new model is
  `belongs_to` indicates a specific item from one model belongs to a particular item from another model
  `has_one` is used for one-to-one relationships
  `has_many` is used for one-to-many relationships
  `has many` :through is used for many-to-many relationships

Polymorphism
  ID: associated id (e.g. message id, comment id)
  Type: associated class (e.g. Message, Comment)

Use 'faker' gem to create fake data

Use footnotes gem to see how many queries you run e.g. per page

check out Dash for managing language/framework documentation locally

Controllers and Views
  Do I need a controller to run routes? Looks like I can use ApplicationController
  Application controller vs generated controllers?

`rails g controller ControllerName` where controller name is capitalized and plural

<%= %> for inserting variables; e.g. <%= @products %> or <%= @products.inspect %>
<% %> for writing loops / logic

| for new line
  e.g.
    <% product.name %> |
    <% product.price %> |
    <% product.quantity %>
  when the HTML is rendered, will all be printed on the same line

begin / rescue is like a try / catch

use strong params









#
