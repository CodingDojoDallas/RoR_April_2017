=begin
Create a BankAccount class with the following:
- Method that returns a user's account number, account number should be generated by a private method, account number should be random
- Method that returns the user's checking account balance
- Method that returns the user's saving account balance
- Allow a user to deposit money into either their checking or saving account
- Allow a user to withdraw money from one of their accounts, return an error if there are insufficient funds
- Allow the user to view the total amount of money they have at the bank
- Track how many accounts the bank currently has
- Add an interest_rate attribute that is not accessible by the user. Set it to 0.01
- Method called account_information that displays the users account number, total money, checking account balance, saving account balance and interest rate
- A user should not be able to set any attributes from the BankAccount class
=end

class BankAccount
  attr_reader :account_number, :checkings_balance, :savings_balance
  attr :interest_rate
  @@total_accounts = 0
  @interest_rate = 0.01

  def initialize
    generate_account_number
    @@total_accounts += 1
    @savings_balance = 0
    @checkings_balance = 0
  end

  def deposit(account, amount)
    if account.downcase == "checking"
      @checkings_balance += amount
    else
      @savings_balance += amount
    end
    self
  end

  def withdrawal(account, amount)
    if account.downcase == "checking"
      if @checkings_balance - amount < 0
        raise "Insufficient Funds, you have #{@checkings_balance} in this account"
      else
        @checkings_balance -= amount
      end
    else
      if @savings_balance - amount < 0
        raise "Insufficient Funds, you have #{@savings_balance} in this account"
      else
        @savings_balance -= amount
      end
    end
    self
  end

  def total_balance
    "Checking Balance: #{@checkings_balance}\nSaving Balance: #{@savings_balance}\nTotal Balance: #{@checkings_balance + @savings_balance}"
  end

  def account_information
    "Account Number: #{@account_number}\nInterest Rate: #{@interest_rate}\n#{self.total_balance}"
  end

  def self.num_accounts
    @@bank_accounts
  end

  private
    def generate_account_number
      @account_number = rand(1000001..9000009)
      # Alternate: Array.new(10).map { rand(1..9) }.join
    end
end


bank = BankAccount.new.deposit("saving", 500).withdrawal("saving", 20).deposit("checking", 800)
puts bank.account_information
